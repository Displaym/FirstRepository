#include <iostream>

using namespace std;

int main() {
  enum paytype { CARD=10, CHECK
  };
  union payment {
    char card[25];
    long check = 23;
  }
  info;
  int ptype; //выбор картой или чеком
  cin >> ptype;
  switch(ptype) {
    case CARD: cout << "Оплата по карте: " << info.card;
    break;
    case CHECK: cout << "Оплата чеком " << info.check;
    break;
  }
return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main() {
  enum paytype {CARD, CHECK};
  struct {
    paytype ptype = CARD;
    union {
      char card[25];
      long check;
    };
  }
  info;
  switch(info.ptype) {
    case CARD: cout << "Оплата по карте: " << info.card;
    break;
    case CHECK: cout << "Оплата чеком: " << info.check;
    break;
  }
return 0;
}
/////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main() {
  //анонимное объединение
  union {
    short int count;
    char ch[2];
  };
  //как происходит непосредственные обращения к членам анонимного объединения//
  ch[0] = 'X';
  ch[1] = 'Y';
  cout << "Объединение в виде символов: " << ch[0] << ch[1] << endl;
  cout << "Объединение в виде целого значения: " << count << endl;
return 0;
}
//////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

  class queue {
    int q[100];
    int sloc, rloc;
    public:
    queue(); //конструктор
    ~queue(); // деструктор
    void qput(int i);
    int qget();
  };
  //определение конструктора
  queue::queue() {
    sloc = rloc = 0;
    cout << "Очередь инициализирована. \n";
  }
  //определение деструктора
  queue::~queue() {
    cout << "Очередь разрушена. \n";
  }
  //Значение в очередь целочисленного значения 
  void queue::qput(int i) {
    if (sloc == 100) {
      cout << "Очередь заполна. \n";
      return;
    }
    sloc++;
    q[sloc] = i;
  }
  //Извлечение из очереди целочисленного значения
  int queue:: qget() {
    if (rloc == sloc) {
      cout << "Очередь пуста. \n";
      return 0;
    }
    rloc++;
    return q[rloc];
  }
  int main() {
    queue a,b; //создание двух объектов класса queue
    a.qput(10);
    b.qput(19);
    
    a.qput(20);
    b.qput(1);
    
    cout << a.qget() << " ";
    cout << a.qget() << " ";
    cout << b.qget() << " ";  
    cout << b.qget() << "\n";
return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

struct cl {
  int get_i(); // public
  void put_i(int j); // по умножению
  private:
  int i;
};
  int cl::get_i() {
    return i;
  }
  void cl::put_i(int j) {
    i = j;
  }
  int main() {
    cl s;
    s.put_i(10);
    cout << s.get_i();
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class cl {
  int i; //закрытый член по умолчанию
  public:
  int get_i():
  void put_i(int j):
};
inline int cl::get_i() {
  return i;
}
inline void cl::put_i(int j) {
  i = j;
}

int main() {
  cl s;
  s.put_i(10);
  cout << s.get_i();
  return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

union u_type {
  u_type(short int a); //открытые по умолчанию
  void showchars();
  short int i;
  char ch[2];
};
//конструктор
u_type::u_type(short int a) {
  i = a;
}
// отображение символов составляющих значение типа short int
void u_type :: showchars() {
  cout << ch[0] << " ";
  cout << ch[1] << "\n";
}
int main() {
  u_type u(1000);
  u.showchars();
return 0;
}
